name: 🔄 Actualizar Pendientes de Operaciones

on:
  schedule:
    # Ejecutar múltiples veces al día
    - cron: '0 6 * * *'   # 6:00 AM UTC (3:00 AM Argentina)
    - cron: '0 14 * * *'  # 2:00 PM UTC (11:00 AM Argentina)
    - cron: '0 18 * * *'  # 6:00 PM UTC (3:00 PM Argentina)

  # Permitir ejecución manual desde GitHub
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Forzar actualización completa'
        required: false
        default: 'false'
        type: boolean

jobs:
  actualizar-pendientes:
    name: 🚛 Actualizar Lista de Pendientes
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 🚀 Iniciar proceso
        run: |
          echo "🕒 Iniciando actualización automática de pendientes..."
          echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "🌍 Timezone: $TZ"
          echo "🔧 Forzar actualización: ${{ github.event.inputs.force_update || 'false' }}"

      - name: 🔍 Verificar estado de la aplicación
        run: |
          echo "📡 Verificando que la aplicación esté disponible..."
          echo "🔗 URL base: ${{ secrets.APP_URL }}"

          # Probar endpoint de salud simple primero
          health_url="${{ secrets.APP_URL }}/api/health"
          echo "🏥 Probando health endpoint: $health_url"

          health_response=$(curl -s -w "%{http_code}" \
            -m 10 \
            -H "User-Agent: GitHubActions/HealthCheck" \
            "$health_url")

          health_code="${health_response: -3}"
          health_body="${health_response%???}"

          echo "🏥 Health check status: $health_code"
          echo "📋 Health response: $health_body"

          # Verificar página principal también
          main_check=$(curl -s -o /dev/null -w "%{http_code}" \
            -m 10 \
            "${{ secrets.APP_URL }}" || echo "000")

          echo "🌐 Main page status: $main_check"

          if [ "$health_code" != "200" ] && [ "$main_check" != "200" ]; then
            echo "⚠️ La aplicación no está respondiendo correctamente"
            echo "🔗 URLs verificadas: health=$health_url, main=${{ secrets.APP_URL }}"
            # No fallar, continuar con el intento
          else
            echo "✅ Aplicación disponible"
          fi

      - name: 📊 Consultar estado actual
        id: current_state
        run: |
          echo "📋 Consultando estado actual de pendientes..."
          echo "🔗 URL base: ${{ secrets.APP_URL }}"

          # Usar GET para consultar estado sin ejecutar actualización
          api_url="${{ secrets.APP_URL }}/api/actualizar-pendientes"
          echo "🎯 URL completa: $api_url"

          current_response=$(curl -s -w "%{http_code}" \
            -m 30 \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHubActions/PendientesUpdater" \
            -H "Accept: application/json" \
            -L \
            "$api_url")

          current_http_code="${current_response: -3}"
          current_body="${current_response%???}"

          echo "📊 Estado actual - Código HTTP: $current_http_code"
          echo "📋 Respuesta: $current_body"

          # Guardar para el siguiente step
          echo "current_status=$current_http_code" >> $GITHUB_OUTPUT
          echo "current_data=$current_body" >> $GITHUB_OUTPUT

      - name: 🔄 Ejecutar actualización de pendientes
        id: update
        run: |
          echo "🔄 Ejecutando actualización de pendientes..."
          echo "🔗 URL base: ${{ secrets.APP_URL }}"

          # Construir URL completa para cron endpoint
          cron_url="${{ secrets.APP_URL }}/api/cron/actualizar-pendientes"
          echo "🎯 URL cron completa: $cron_url"

          # Construir headers
          headers=(-H "Content-Type: application/json" -H "User-Agent: GitHubActions/AutoUpdater" -H "Accept: application/json")

          # Agregar token si está configurado
          if [ -n "${{ secrets.CRON_SECRET_TOKEN }}" ]; then
            headers+=(-H "Authorization: Bearer ${{ secrets.CRON_SECRET_TOKEN }}")
            echo "🔐 Token de autorización configurado"
          else
            echo "⚠️ No hay token de autorización configurado"
          fi

          # Ejecutar actualización con follow redirects
          update_response=$(curl -s -w "%{http_code}" \
            -X POST \
            -m 30 \
            -L \
            "${headers[@]}" \
            "$cron_url")

          update_http_code="${update_response: -3}"
          update_body="${update_response%???}"

          echo "📊 Actualización - Código HTTP: $update_http_code"
          echo "📋 Respuesta completa: $update_body"

          # Guardar resultados
          echo "update_status=$update_http_code" >> $GITHUB_OUTPUT
          echo "update_data=$update_body" >> $GITHUB_OUTPUT

          # Extraer información específica si la respuesta es JSON válida
          if command -v jq >/dev/null 2>&1; then
            if echo "$update_body" | jq . >/dev/null 2>&1; then
              registros=$(echo "$update_body" | jq -r '.registros_insertados // "N/A"')
              success=$(echo "$update_body" | jq -r '.success // false')
              message=$(echo "$update_body" | jq -r '.message // "N/A"')

              echo "📈 Registros insertados: $registros"
              echo "✅ Éxito: $success"
              echo "💬 Mensaje: $message"

              echo "registros_insertados=$registros" >> $GITHUB_OUTPUT
              echo "success=$success" >> $GITHUB_OUTPUT
              echo "message=$message" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 📈 Procesar resultados
        run: |
          echo "📊 Procesando resultados de la actualización..."

          update_status="${{ steps.update.outputs.update_status }}"
          success="${{ steps.update.outputs.success }}"
          registros="${{ steps.update.outputs.registros_insertados }}"
          message="${{ steps.update.outputs.message }}"

          echo "🔍 Estado HTTP: $update_status"
          echo "✅ Éxito: $success"
          echo "📊 Registros procesados: $registros"
          echo "💬 Mensaje: $message"

          if [ "$update_status" = "200" ] && [ "$success" = "true" ]; then
            echo "🎉 ¡Actualización completada exitosamente!"
            echo "📈 Se procesaron $registros registros"

            # Crear resumen para GitHub
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ✅ Actualización Exitosa

          **🕒 Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **📊 Registros procesados:** $registros
          **💬 Mensaje:** $message
          **🔗 Endpoint:** \`/api/cron/actualizar-pendientes\`

          ### 📋 Próximos pasos
          - Los pendientes están disponibles en [/pendientes](${{ secrets.APP_URL }}/pendientes)
          - Los registros automáticos pueden editarse en Supabase
          - El próximo update se ejecutará según el schedule configurado
          EOF

          else
            echo "❌ Error en la actualización"
            echo "🔍 Código de estado: $update_status"
            echo "📋 Respuesta: ${{ steps.update.outputs.update_data }}"

            # Crear resumen de error
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ❌ Error en Actualización

          **🕒 Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **🔍 Código HTTP:** $update_status
          **💬 Mensaje:** $message
          **📋 Respuesta completa:** \`${{ steps.update.outputs.update_data }}\`

          ### 🔧 Posibles soluciones
          - Verificar que la aplicación esté funcionando
          - Revisar la configuración de secrets en GitHub
          - Ejecutar manualmente desde [/pendientes](${{ secrets.APP_URL }}/pendientes)
          EOF

            exit 1
          fi

      - name: 🧹 Cleanup y resumen final
        if: always()
        run: |
          echo "🧹 Finalizando proceso..."
          echo "⏱️ Duración total: $SECONDS segundos"
          echo "🔄 Workflow completado: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

          # Log para debugging
          echo "🔍 Variables de entorno relevantes:"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_RUN_ID: $GITHUB_RUN_ID"
          echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER"